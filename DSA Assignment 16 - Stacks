Assignment Questions 16
ðŸ’¡
Question 1

Given an array, for each element find the value of the nearest element to the right which is having a frequency greater than 
that of the current element. If there does not exist an answer for a position, then make the value â€˜-1â€™.
Examples:
Input: a[] = [1, 1, 2, 3, 4, 2, 1]
Output : [-1, -1, 1, 2, 2, 1, -1]

Explanation:
Given array a[] = [1, 1, 2, 3, 4, 2, 1]
Frequency of each element is: 3, 3, 2, 1, 1, 2, 3

Lets calls Next Greater Frequency element as NGF
1. For element a[0] = 1 which has a frequency = 3,
   As it has frequency of 3 and no other next element
   has frequency more than 3 so  '-1'
2. For element a[1] = 1 it will be -1 same logic
   like a[0]
3. For element a[2] = 2 which has frequency = 2,
   NGF element is 1 at position = 6  with frequency
   of 3 > 2
4. For element a[3] = 3 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
5. For element a[4] = 4 which has frequency = 1,
   NGF element is 2 at position = 5 with frequency
   of 2 > 1
6. For element a[5] = 2 which has frequency = 2,
   NGF element is 1 at position = 6 with frequency
   of 3 > 2
7. For element a[6] = 1 there is no element to its
   right, hence -1
â€‹
Input : a[] = [1, 1, 1, 2, 2, 2, 2, 11, 3, 3]
Output : [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]


Python Code:

def nearestGreaterFrequency(a):
    stack = []
    freq = {}
    result = []

    for i in range(len(a) - 1, -1, -1):
        freq[a[i]] = freq.get(a[i], 0) + 1

        while stack and freq[a[i]] >= freq[a[stack[-1]]]:
            stack.pop()

        if not stack:
            result.append(-1)
        else:
            result.append(a[stack[-1]])

        stack.append(i)

    return result[::-1]


# Test Example 1
a1 = [1, 1, 2, 3, 4, 2, 1]
print(nearestGreaterFrequency(a1))  # Output: [-1, -1, 1, 2, 2, 1, -1]

# Test Example 2
a2 = [1, 1, 1, 2, 2, 2, 2, 11, 3, 3]
print(nearestGreaterFrequency(a2))  # Output: [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]

ðŸ’¡
Question 2

Given a stack of integers, sort it in ascending order using another temporary stack.
Examples:
Input : [34, 3, 31, 98, 92, 23]
Output : [3, 23, 31, 34, 92, 98]

Input : [3, 5, 1, 4, 2, 8]
Output : [1, 2, 3, 4, 5, 8]
â€‹
Python Code:

def sortStack(stack):
    tempStack = []

    while stack:
        temp = stack.pop()

        while tempStack and tempStack[-1] > temp:
            stack.append(tempStack.pop())

        tempStack.append(temp)

    while tempStack:
        stack.append(tempStack.pop())

    return stack


# Test Example 1
stack1 = [34, 3, 31, 98, 92, 23]
print(sortStack(stack1))  # Output: [3, 23, 31, 34, 92, 98]

# Test Example 2
stack2 = [3, 5, 1, 4, 2, 8]
print(sortStack(stack2))  # Output: [1, 2, 3, 4, 5, 8]


ðŸ’¡
Question 3

Given a stack with push(), pop(), and empty() operations, The task is to delete the middle element of it without using any additional data structure.
Input  : Stack[] = [1, 2, 3, 4, 5]
Output : Stack[] = [1, 2, 4, 5]
Input  : Stack[] = [1, 2, 3, 4, 5, 6]
Output : Stack[] = [1, 2, 4, 5, 6]

Python Code:

def deleteMiddle(stack):
    if len(stack) == 0:
        return

    middleIndex = (len(stack) // 2) + 1

    def deleteMiddleUtil(stack, currIndex):
        if currIndex == middleIndex:
            stack.pop()
            return

        temp = stack.pop()
        deleteMiddleUtil(stack, currIndex + 1)
        stack.append(temp)

    deleteMiddleUtil(stack, 1)

    return stack


# Test Example 1
stack1 = [1, 2, 3, 4, 5]
print(deleteMiddle(stack1))  # Output: [1, 2, 4, 5]

# Test Example 2
stack2 = [1, 2, 3, 4, 5, 6]
print(deleteMiddle(stack2))  # Output: [1, 2, 4, 5, 6]


ðŸ’¡
Question 4

Given a Queue consisting of first n natural numbers (in random order). The task is to check whether the given Queue elements can be arranged 
in increasing order in another Queue using a stack. The operation allowed are:
Push and pop elements from the stack
Pop (Or Dequeue) from the given Queue.
Push (Or Enqueue) in the another Queue.
Examples :
Input : Queue[] = { 5, 1, 2, 3, 4 } 
Output : Yes 
Pop the first element of the given Queue 
i.e 5. Push 5 into the stack. 
Now, pop all the elements of the given Queue and push them to second Queue. 
Now, pop element 5 in the stack and push it to the second Queue.   
Input : Queue[] = { 5, 1, 2, 6, 3, 4 } 
Output : No 
Push 5 to stack. 
Pop 1, 2 from given Queue and push it to another Queue. 
Pop 6 from given Queue and push to stack. 
Pop 3, 4 from given Queue and push to second Queue. 
Now, from using any of above operation, we cannot push 5 into the second Queue because it is below the 6 in the stack.

Python Code:

from queue import Queue

def checkQueueOrder(queue):
    stack = []
    sortedQueue = Queue()

    while not queue.empty():
        element = queue.get()

        while stack and element < stack[-1]:
            sortedQueue.put(stack.pop())

        stack.append(element)

    while stack:
        sortedQueue.put(stack.pop())

    while not sortedQueue.empty():
        queue.put(sortedQueue.get())

    # Check if the elements are arranged in increasing order
    while not queue.empty():
        element = queue.get()
        if not queue.empty() and element >= queue.queue[0]:
            return "No"

    return "Yes"


# Test Example 1
queue1 = Queue()
queue1.put(5)
queue1.put(1)
queue1.put(2)
queue1.put(3)
queue1.put(4)
print(checkQueueOrder(queue1))  # Output: Yes

# Test Example 2
queue2 = Queue()
queue2.put(5)
queue2.put(1)
queue2.put(2)
queue2.put(6)
queue2.put(3)
queue2.put(4)
print(checkQueueOrder(queue2))  # Output: No


ðŸ’¡
Question 5

Given a number , write a program to reverse this number using stack.
Examples:
Input : 365
Output : 563

Input : 6899
Output : 9986

Python Code:


def reverseNumber(num):
    stack = []
    num_str = str(num)

    # Push each character onto the stack
    for char in num_str:
        stack.append(char)

    reversed_str = ""

    # Pop each character from the stack
    while stack:
        reversed_str += stack.pop()

    reversed_num = int(reversed_str)

    return reversed_num


# Test Example 1
num1 = 365
print(reverseNumber(num1))  # Output: 563

# Test Example 2
num2 = 6899
print(reverseNumber(num2))  # Output: 9986

â€‹
ðŸ’¡
Question 6

Given an integer k and a queue of integers, The task is to reverse the order of the first k elements of the queue, leaving the other elements in the same relative order.
Only following standard operations are allowed on queue.
enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.

Python Code:

def reverseKElements(queue, k):
    stack = []

    # Dequeue the first k elements and push them onto the stack
    for _ in range(k):
        stack.append(queue.dequeue())

    # Enqueue the elements from the stack back into the queue
    while stack:
        queue.enqueue(stack.pop())

    # Move the remaining elements to the back of the queue
    for _ in range(queue.size() - k):
        queue.enqueue(queue.dequeue())


# Queue class implementation
class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if self.is_empty():
            return None
        return self.items.pop(0)

    def size(self):
        return len(self.items)

    def front(self):
        if self.is_empty():
            return None
        return self.items[0]


# Test example
queue = Queue()
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)
queue.enqueue(4)
queue.enqueue(5)

print("Before reversing:", end=" ")
for _ in range(queue.size()):
    print(queue.dequeue(), end=" ")

reverseKElements(queue, 3)

print("\nAfter reversing:", end=" ")
for _ in range(queue.size()):
    print(queue.dequeue(), end=" ")


ðŸ’¡
Question 7

Given a sequence of n strings, the task is to check if any two similar words come together and then destroy each 
other then print the number of words left in the sequence after this pairwise destruction.
Examples:
Input : ab aa aa bcd ab
Output : 3
As aa, aa destroys each other so,
ab bcd ab is the new sequence.
Input :  tom jerry jerry tom
Output : 0
As first both jerry will destroy each other.
Then sequence will be tom, tom they will also destroy
each other. So, the final sequence doesnâ€™t contain any
word.

Python Code:

def countWordsLeft(sequence):
    stack = []

    for word in sequence:
        if stack and stack[-1] == word:
            stack.pop()
        else:
            stack.append(word)

    return len(stack)


# Test examples
sequence1 = ['ab', 'aa', 'aa', 'bcd', 'ab']
print("Number of words left:", countWordsLeft(sequence1))  # Output: 3

sequence2 = ['tom', 'jerry', 'jerry', 'tom']
print("Number of words left:", countWordsLeft(sequence2))  # Output: 0


ðŸ’¡
Question 8

Given an array of integers, the task is to find the maximum absolute difference between the nearest left and the right smaller element of every element in the array.
Note: If there is no smaller element on right side or left side of any element then we take zero as the smaller element. For example for the leftmost element,
the nearest smaller element on the left side is considered as 0. Similarly, for rightmost elements, the smaller element on the right side is considered as 0.
Examples:
Input : arr[] = {2, 1, 8}
Output : 1
Left smaller  LS[] {0, 0, 1}
Right smaller RS[] {1, 0, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 1

Input  : arr[] = {2, 4, 8, 7, 7, 9, 3}
Output : 4
Left smaller   LS[] = {0, 2, 4, 4, 4, 7, 2}
Right smaller  RS[] = {0, 3, 7, 3, 3, 3, 0}
Maximum Diff of abs(LS[i] - RS[i]) = 7 - 3 = 4

Input : arr[] = {5, 1, 9, 2, 5, 1, 7}
Output : 1
â€‹
Python Code:

def maxAbsoluteDifference(arr):
    n = len(arr)
    left_smaller = [-1] * n
    right_smaller = [-1] * n
    stack = []

    # Find nearest smaller element on the left side
    for i in range(n):
        while stack and arr[i] < arr[stack[-1]]:
            index = stack.pop()
            left_smaller[index] = arr[i]
        stack.append(i)

    stack.clear()

    # Find nearest smaller element on the right side
    for i in range(n - 1, -1, -1):
        while stack and arr[i] < arr[stack[-1]]:
            index = stack.pop()
            right_smaller[index] = arr[i]
        stack.append(i)

    max_diff = 0
    for i in range(n):
        diff = abs(left_smaller[i] - right_smaller[i])
        max_diff = max(max_diff, diff)

    return max_diff


# Test examples
arr1 = [2, 1, 8]
print("Maximum absolute difference:", maxAbsoluteDifference(arr1))  # Output: 1

arr2 = [2, 4, 8, 7, 7, 9, 3]
print("Maximum absolute difference:", maxAbsoluteDifference(arr2))  # Output: 4

arr3 = [5, 1, 9, 2, 5, 1, 7]
print("Maximum absolute difference:", maxAbsoluteDifference(arr3))  # Output: 1
