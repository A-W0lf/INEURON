# Assignment Questions 14

<aside>
ðŸ’¡ **Question 1**

Given a linked list ofÂ **N**Â nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

**Example 1:**

```
Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.

```

**Example 2:**

```
Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output:1
Explanation:TheÂ Linked list does not
contains any loop.
```

**Example 3:**

```
Input:
N = 4
value[] = {1,2,3,4}
X = 1
Output:1
Explanation:The link list looks like
1 -> 2 -> 3 -> 4
^              |
|______________|
A loop is present.
If you remove it successfully,
the answer will be 1.
```

</aside>


Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detectAndRemoveLoop(head):
    slow = head
    fast = head

    # Move slow pointer one step and fast pointer two steps
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        # If the pointers meet, there is a loop
        if slow == fast:
            break

    # If no loop is found, return
    if slow != fast:
        return head

    # Move slow pointer to the head
    slow = head

    # Find the node where the loop starts
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Unlink the loop
    fast.next = None

    return head

# Function to create a linked list
def createLinkedList(arr):
    head = None
    tail = None
    for data in arr:
        new_node = Node(data)
        if head is None:
            head = new_node
            tail = new_node
        else:
            tail.next = new_node
            tail = new_node
    return head

# Function to print the linked list
def printLinkedList(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next
    print()

# Example 1
arr = [1, 3, 4]
n = 3
x = 2
head = createLinkedList(arr)
if x > 0:
    # Create loop
    tail = head
    for i in range(1, x):
        tail = tail.next
    current = head
    while current.next:
        current = current.next
    current.next = tail

head = detectAndRemoveLoop(head)
printLinkedList(head)

# Example 2
arr = [1, 8, 3, 4]
n = 4
x = 0
head = createLinkedList(arr)
head = detectAndRemoveLoop(head)
printLinkedList(head)

# Example 3
arr = [1, 2, 3, 4]
n = 4
x = 1
head = createLinkedList(arr)
if x > 0:
    # Create loop
    tail = head
    for i in range(1, x):
        tail = tail.next
    current = head
    while current.next:
        current = current.next
    current.next = tail

head = detectAndRemoveLoop(head)
printLinkedList(head)

<aside>
ðŸ’¡ **Question 2**

A numberÂ **N**Â is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

**Example 1:**

```
Input:
LinkedList: 4->5->6
Output:457

```

**Example 2:**

```
Input:
LinkedList: 1->2->3
Output:124
```

</aside>

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


def addOne(head):
    # Reverse the linked list
    prev = None
    current = head
    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    head = prev

    # Add 1 to the number
    carry = 1
    current = head
    while current:
        total = current.data + carry
        current.data = total % 10
        carry = total // 10
        current = current.next

    # If carry remains after processing all digits, create a new node
    if carry:
        new_node = Node(carry)
        current = head
        while current.next:
            current = current.next
        current.next = new_node

    # Reverse the linked list again to get the updated number
    prev = None
    current = head
    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    head = prev

    return head


# Function to create a linked list
def createLinkedList(arr):
    head = None
    tail = None
    for data in arr:
        new_node = Node(data)
        if head is None:
            head = new_node
            tail = new_node
        else:
            tail.next = new_node
            tail = new_node
    return head


# Function to print the linked list
def printLinkedList(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next
    print()


# Example 1
arr = [4, 5, 6]
head = createLinkedList(arr)
head = addOne(head)
printLinkedList(head)

# Example 2
arr = [1, 2, 3]
head = createLinkedList(arr)
head = addOne(head)
printLinkedList(head)


<aside>
ðŸ’¡ **Question 3**

Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:(i) aÂ **next**Â pointer to the next node,(ii) aÂ **bottom**Â pointerÂ to a linked list where this node is head.Each of theÂ sub-linked-list is in sorted order.Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order.Â **Note:**Â The flattened list will be printed using the bottom pointer instead of next pointer.

**Example 1:**

```
Input:
5 -> 10 -> 19 -> 28
|     |     |     |
7     20    22   35
|           |     |
8          50    40
|                 |
30               45
Output:Â 5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every
node in a single level.(Note:| represents the bottom pointer.)

```

**Example 2:**

```
Input:
5 -> 10 -> 19 -> 28
|          |
7          22
|          |
8          50
|
30
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.

(Note:| represents the bottom pointer.)
```

</aside>

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.bottom = None


def mergeLists(head1, head2):
    # Base cases
    if head1 is None:
        return head2
    if head2 is None:
        return head1

    # Compare the data of the two heads and merge them in sorted order
    if head1.data < head2.data:
        result = head1
        result.bottom = mergeLists(head1.bottom, head2)
    else:
        result = head2
        result.bottom = mergeLists(head1, head2.bottom)

    return result


def flattenLinkedList(head):
    # Base case: if the head or head.next is None, return the head
    if head is None or head.next is None:
        return head

    # Recursively flatten the remaining linked lists
    head.next = flattenLinkedList(head.next)

    # Merge the current linked list with the flattened next linked list
    head = mergeLists(head, head.next)

    # Return the head of the merged linked list
    return head


# Function to create a linked list with sub-linked lists
def createLinkedList(arr):
    head = None
    tail = None
    for sublist in arr:
        sublist_head = None
        sublist_tail = None
        for data in sublist:
            new_node = Node(data)
            if sublist_head is None:
                sublist_head = new_node
                sublist_tail = new_node
            else:
                sublist_tail.bottom = new_node
                sublist_tail = new_node
        if head is None:
            head = sublist_head
            tail = sublist_tail
        else:
            tail.next = sublist_head
            tail = sublist_tail
    return head


# Function to print the linked list
def printLinkedList(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.bottom
    print()


# Example 1
arr = [[5, 7, 8, 30], [10, 20], [19, 22, 50], [28, 35, 40, 45]]
head = createLinkedList(arr)
head = flattenLinkedList(head)
printLinkedList(head)

# Example 2
arr = [[5, 7, 8, 30], [10], [19, 22, 50]]
head = createLinkedList(arr)
head = flattenLinkedList(head)
printLinkedList(head)




<aside>
ðŸ’¡ **Question 4**

You are given a specialÂ linked listÂ withÂ **N**Â nodes where each node has aÂ next pointer pointing to itsÂ next node. You are also givenÂ **M**Â random pointers, where you will be givenÂ **M**Â number of pairs denoting two nodesÂ **a**Â andÂ **b**Â Â **i.e.Â a->arb = b**Â (arb is pointer to random node)**.**

Construct a copy of the given list. The copy should consist of exactlyÂ **N**Â new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodesÂ **X**Â andÂ **Y**Â in the original list, whereÂ **X.arb**Â **-->**Â **Y**, then for the corresponding two nodesÂ **x**Â andÂ **y**Â in the copied list,Â **x.arb --> y.**

Return the head of the copied linked list.

!https://contribute.geeksforgeeks.org/wp-content/uploads/clone.jpg

**Note**Â :- The diagram isn't part of any example, it just depicts an example of how the linked list may look like.

**Example 1:**

```
Input:
N = 4, M = 2
value = {1,2,3,4}
pairs = {{1,2},{2,4}}
Output:1
Explanation:In this test case, there
are 4 nodes in linked list.Â  Among these
4 nodes,Â  2 nodes have arbitrary pointer
set, rest two nodes have arbitrary pointer
as NULL. Second line tells us the value
of four nodes. The third line gives the
information about arbitrary pointers.
The first node arbitrary pointer is set to
node 2.Â  The second nodeÂ arbitrary pointer
is set to node 4.

```

**Example 2:**

```
Input:
N = 4, M = 2
value[] = {1,3,5,9}
pairs[] = {{1,1},{3,4}}
Output:1
Explanation:In the given testcase ,
applying the method as stated in the
above example, the output will be 1.
```

</aside>

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.random = None


def copyRandomList(head):
    if head is None:
        return None

    # Step 1: Create new nodes and insert them after the original nodes
    current = head
    while current:
        copied = Node(current.data)
        copied.next = current.next
        current.next = copied
        current = copied.next

    # Step 2: Assign random pointers for the copied nodes
    current = head
    while current:
        copied = current.next
        if current.random:
            copied.random = current.random.next
        current = copied.next

    # Step 3: Separate the original and copied lists
    current = head
    copied_head = head.next
    copied_current = copied_head

    while current:
        current.next = copied_current.next
        current = current.next
        if current:
            copied_current.next = current.next
            copied_current = copied_current.next

    return copied_head


# Create the original linked list
head = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)

head.next = node2
node2.next = node3
node3.next = node4

# Set the random pointers
head.random = node2
node2.random = node4

# Call the function to construct the copied linked list
copied_head = copyRandomList(head)

# Print the copied linked list
current = copied_head
while current:
    print("Data:", current.data, end=" ")
    if current.random:
        print("Random:", current.random.data)
    else:
        print("Random: None")
    current = current.next



<aside>
ðŸ’¡ **Question 5**

Given theÂ `head`Â of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and returnÂ *the reordered list*.

TheÂ **first**Â node is consideredÂ **odd**, and theÂ **second**Â node isÂ **even**, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problemÂ inÂ `O(1)`Â extra space complexity andÂ `O(n)`Â time complexity.

**Example 1:**

!https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg

```
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

```

**Example 2:**

!https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg

```
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]
```

</aside>

Python Code:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def oddEvenList(head):
    if head is None:
        return head

    # Separate odd and even nodes into two lists
    odd_head = head
    even_head = head.next
    odd_current = odd_head
    even_current = even_head

    while even_current and even_current.next:
        odd_current.next = even_current.next
        odd_current = odd_current.next
        even_current.next = odd_current.next
        even_current = even_current.next

    # Combine the odd and even lists
    odd_current.next = even_head

    return odd_head


# Create the linked list
head = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

head.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Call the function to reorder the list
reordered_head = oddEvenList(head)

# Print the reordered list
current = reordered_head
while current:
    print(current.val, end=" ")
    current = current.next

<aside>
ðŸ’¡ **Question 6**

Given a singly linked list of sizeÂ **N**. The task is toÂ **left-shift**Â the linked list byÂ **k**Â nodes, whereÂ **k**Â is a given positive integer smaller than or equal to length of the linked list.

**Example 1:**

```
Input:
N = 5
value[] = {2, 4, 7, 8, 9}
k = 3
Output:8 9 2 4 7
Explanation:Rotate 1:4 -> 7 -> 8 -> 9 -> 2
Rotate 2:Â 7Â -> 8Â -> 9Â -> 2Â -> 4
Rotate 3:Â 8Â -> 9Â -> 2Â -> 4Â -> 7

```

**Example 2:**

```
Input:
N = 8
value[] = {1, 2, 3, 4, 5, 6, 7, 8}
k = 4
Output:5 6 7 8 1 2 3 4
```

</aside>

Python Code:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def leftShift(head, k):
    if head is None or k == 0:
        return head

    # Find the length of the linked list
    length = 0
    current = head
    while current:
        length += 1
        current = current.next

    # Adjust k to the equivalent rotation value
    k = k % length

    if k == 0:
        return head

    # Find the (k+1)th node from the beginning
    count = 1
    current = head
    while count < k and current:
        current = current.next
        count += 1

    if current is None:
        return head

    new_head = current.next
    current.next = None

    # Traverse to the end of the list
    current = new_head
    while current.next:
        current = current.next

    # Make the last node point to the original head
    current.next = head

    return new_head


# Create the linked list
head = ListNode(2)
node2 = ListNode(4)
node3 = ListNode(7)
node4 = ListNode(8)
node5 = ListNode(9)

head.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Set the value of k
k = 3

# Call the function to left-shift the list
shifted_head = leftShift(head, k)

# Print the shifted list
current = shifted_head
while current:
    print(current.val, end=" ")
    current = current.next




<aside>
ðŸ’¡ **Question 7**

You are given theÂ `head`Â of a linked list withÂ `n`Â nodes.

For each node in the list, find the value of theÂ **next greater node**. That is, for each node, find the value of the first node that is next to it and has aÂ **strictly larger**Â value than it.

Return an integer arrayÂ `answer`Â whereÂ `answer[i]`Â is the value of the next greater node of theÂ `ith`Â node (**1-indexed**). If theÂ `ith`Â node does not have a next greater node, setÂ `answer[i] = 0`.

**Example 1:**

!https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext1.jpg

```
Input: head = [2,1,5]
Output: [5,5,0]

```

**Example 2:**

!https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext2.jpg

```
Input: head = [2,7,4,3,5]
Output: [7,0,5,5,0]
```

</aside>

Python Code:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def nextLargerNodes(head):
    if not head:
        return []

    stack = []
    result = []

    # Traverse the linked list in reverse order
    current = head
    while current:
        # Pop elements from the stack that are smaller than the current value
        while stack and stack[-1][0] < current.val:
            _, index = stack.pop()
            result[index] = current.val

        # Push the current value and index to the stack
        stack.append((current.val, len(result)))
        result.append(0)

        current = current.next

    return result


# Create the linked list
head = ListNode(2)
node2 = ListNode(1)
node3 = ListNode(5)

head.next = node2
node2.next = node3

# Call the function to find the next greater nodes
result = nextLargerNodes(head)

# Print the result
print(result)


<aside>
ðŸ’¡ **Question 8**

Given theÂ `head`Â of a linked list, we repeatedly delete consecutive sequences of nodes that sum toÂ `0`Â until there are no such sequences.

After doing so, return the head of the final linked list.Â  You may return any such answer.

(Note that in the examples below, all sequences are serializations ofÂ `ListNode`Â objects.)

**Example 1:**

```
Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.

```

**Example 2:**

```
Input: head = [1,2,3,-3,4]
Output: [1,2,4]

```

**Example 3:**

```
Input: head = [1,2,3,-3,-2]
Output: [1]
```

</aside>

Python Code:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeZeroSumSublists(head):
    dummy = ListNode(0)
    dummy.next = head

    # Create a hashmap to store cumulative sums and their corresponding nodes
    cumulative_sum_map = {}
    cumulative_sum = 0
    current = dummy

    # Traverse the linked list and compute cumulative sums
    while current:
        cumulative_sum += current.val

        # If the cumulative sum already exists in the map, remove the nodes between
        # the previous occurrence and the current node
        if cumulative_sum in cumulative_sum_map:
            prev = cumulative_sum_map[cumulative_sum].next
            remove_sum = cumulative_sum + prev.val

            # Remove nodes between the previous occurrence and the current node
            while prev != current:
                del cumulative_sum_map[remove_sum]
                prev = prev.next
                remove_sum += prev.val

            cumulative_sum_map[cumulative_sum].next = current.next
        else:
            cumulative_sum_map[cumulative_sum] = current

        current = current.next

    return dummy.next


# Create the linked list
head = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(-3)
node4 = ListNode(3)
node5 = ListNode(1)

head.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Call the function to remove zero-sum sublists
result = removeZeroSumSublists(head)

# Print the result
current = result
while current:
    print(current.val, end=" ")
    current = current.next


