Question 1

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:
s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.
Example 1:
Input: s = "IDID"
Output:
[0,4,1,3,2]

python Code:

def reconstructPermutation(s):
    n = len(s)
    perm = []
    start = 0
    end = n

    for i in range(n):
        if s[i] == 'I':
            perm.append(start)
            start += 1
        elif s[i] == 'D':
            perm.append(end)
            end -= 1

    # Append the final value
    perm.append(start)

    return perm

# Example usage:

s = "IDID"
result = reconstructPermutation(s)
print("Output:", result) # Output: [0, 4, 1, 3, 2]

Question 2


You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Python Code:

def searchMatrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    rows, cols = len(matrix), len(matrix[0])
    left, right = 0, rows * cols - 1

    while left <= right:
        mid = (left + right) // 2
        num = matrix[mid // cols][mid % cols]

        if num == target:
            return True
        elif num < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

# Example usage:
matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]
target = 3
result = searchMatrix(matrix, target)
print("Output:", result)  # Output: True




Question 3

Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]


**Input:** arr = [2,1]

**Output:**

false

Python Code: 

def validMountainArray(arr):
    n = len(arr)
    if n < 3:
        return False

    peak_index = arr.index(max(arr))
    if peak_index == 0 or peak_index == n - 1:
        return False

    for i in range(1, peak_index):
        if arr[i] <= arr[i - 1]:
            return False

    for i in range(peak_index + 1, n):
        if arr[i] >= arr[i - 1]:
            return False

    return True

# Example usage:
arr = [2, 1]
result = validMountainArray(arr)
print("Output:", result)  # Output: False


Question 4

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

**Explanation:**

[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Python Code:


def findMaxLength(nums):
    count_dict = {0: -1}
    count = 0
    max_length = 0

    for i in range(len(nums)):
        if nums[i] == 1:
            count += 1
        else:
            count -= 1

        if count in count_dict:
            length = i - count_dict[count]
            if length > max_length:
                max_length = length
        else:
            count_dict[count] = i

    return max_length

# Example usage:
nums = [0, 1]
result = findMaxLength(nums)
print("Output:", result)  # Output: 2


Question 5

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]

**Output:** 40

**Explanation:**

We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

Python Code:

def minProductSum(nums1, nums2):
    nums1.sort() 
    nums2.sort(reverse=True) 

    product_sum = 0
    n = len(nums1)
    for i in range(n):
        product_sum += nums1[i] * nums2[i]

    return product_sum

# Example usage:
nums1 = [5, 3, 4, 2]
nums2 = [4, 2, 2, 5]
result = minProductSum(nums1, nums2)
print("Output:", result)  # Output: 40


Question 6

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

Python Code:

def findOriginal(changed):
    frequency = {}

    # Count the frequency of each element in the changed array
    for num in changed:
        frequency[num] = frequency.get(num, 0) + 1

    original = []

    # Traverse the changed array
    for num in changed:
        # Check if the current element is twice the value of another element
        if frequency.get(num * 2, 0) > 0:
            original.append(num)
            frequency[num * 2] -= 1

    return original

# Example usage:
changed = [1, 3, 4, 2, 6, 8]
result = findOriginal(changed)
print("Output:", result)
# Output: [1, 3, 4, 2]


Question 7

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

Example 1:
**Input:** n = 3

**Output:** [[1,2,3],[8,9,4],[7,6,5]]
Python Code:

def generateMatrix(n):
    matrix = [[0] * n for _ in range(n)]
    num = 1
    top = 0
    bottom = n - 1
    left = 0
    right = n - 1

    while num <= n * n:
        # Traverse from left to right
        for i in range(left, right + 1):
            matrix[top][i] = num
            num += 1
        top += 1

        # Traverse from top to bottom
        for i in range(top, bottom + 1):
            matrix[i][right] = num
            num += 1
        right -= 1

        # Traverse from right to left
        for i in range(right, left - 1, -1):
            matrix[bottom][i] = num
            num += 1
        bottom -= 1

        # Traverse from bottom to top
        for i in range(bottom, top - 1, -1):
            matrix[i][left] = num
            num += 1
        left += 1

    return matrix

# Example usage:
n = 3
result = generateMatrix(n)
print("Output:", result)
# Output: [[1,2,3],[8,9,4],[7,6,5]]



Question 8

Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

Example 1:

*Input:** mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]

**Output:**

[[7,0,0],[-7,0,3]]

Python Code:

def multiply(mat1, mat2):
    m, k = len(mat1), len(mat1[0])
    k, n = len(mat2), len(mat2[0])

    # Initialize the result matrix with zeros
    result = [[0] * n for _ in range(m)]

    # Perform matrix multiplication
    for i in range(m):
        for j in range(n):
            for p in range(k):
                result[i][j] += mat1[i][p] * mat2[p][j]

    return result

# Example usage:
mat1 = [[1, 0, 0], [-1, 0, 3]]
mat2 = [[7, 0, 0], [0, 0, 0], [0, 0, 1]]
result = multiply(mat1, mat2)
print("Output:", result)
# Output: [[7, 0, 0], [-7, 0, 3]]



