Assignment Questions 13
ðŸ’¡
Question 1

Given two linked list of the same size, the task is to create a new linked list using those linked lists.
The condition is that the greater node among both linked list will be added to the new linked list.
Examples:
Input: list1 = 5->2->3->8
list2 = 1->7->4->5
Output: New list = 5->7->4->8

Input:list1 = 2->8->9->3
list2 = 5->3->6->4
Output: New list = 5->8->9->4
â€‹

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def createNewList(list1, list2):
    new_list = None
    tail = None
    ptr1 = list1
    ptr2 = list2

    while ptr1 is not None and ptr2 is not None:
        if ptr1.data >= ptr2.data:
            new_node = Node(ptr1.data)
            ptr1 = ptr1.next
        else:
            new_node = Node(ptr2.data)
            ptr2 = ptr2.next

        if new_list is None:
            new_list = new_node
            tail = new_list
        else:
            tail.next = new_node
            tail = tail.next

    while ptr1 is not None:
        new_node = Node(ptr1.data)
        tail.next = new_node
        tail = tail.next
        ptr1 = ptr1.next

    while ptr2 is not None:
        new_node = Node(ptr2.data)
        tail.next = new_node
        tail = tail.next
        ptr2 = ptr2.next

    return new_list

# Example 1
list1 = Node(5)
list1.next = Node(2)
list1.next.next = Node(3)
list1.next.next.next = Node(8)

list2 = Node(1)
list2.next = Node(7)
list2.next.next = Node(4)
list2.next.next.next = Node(5)

new_list = createNewList(list1, list2)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 5 7 4 8

# Example 2
list1 = Node(2)
list1.next = Node(8)
list1.next.next = Node(9)
list1.next.next.next = Node(3)

list2 = Node(5)
list2.next = Node(3)
list2.next.next = Node(6)
list2.next.next.next = Node(4)

new_list = createNewList(list1, list2)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 5 8 9 4



ðŸ’¡
Question 2

Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should only be traversed once.
For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.
Example 1:
Input:
LinkedList: 
11->11->11->21->43->43->60
Output:
11->21->43->60
â€‹
Example 2:
Input:
LinkedList: 
10->12->12->25->25->25->34
Output:
10->12->25->34

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def removeDuplicates(head):
    current = head

    while current is not None and current.next is not None:
        if current.data == current.next.data:
            current.next = current.next.next
        else:
            current = current.next

    return head

# Example 1
list1 = Node(11)
list1.next = Node(11)
list1.next.next = Node(11)
list1.next.next.next = Node(21)
list1.next.next.next.next = Node(43)
list1.next.next.next.next.next = Node(43)
list1.next.next.next.next.next.next = Node(60)

new_list = removeDuplicates(list1)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 11 21 43 60

# Example 2
list2 = Node(10)
list2.next = Node(12)
list2.next.next = Node(12)
list2.next.next.next = Node(25)
list2.next.next.next.next = Node(25)
list2.next.next.next.next.next = Node(25)
list2.next.next.next.next.next.next = Node(34)

new_list = removeDuplicates(list2)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 10 12 25 34

â€‹
ðŸ’¡
Question 3

Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list.
If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).
Example 1:
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output:4 2 2 1 8 7 6 5
Explanation:
The first 4 elements 1,2,2,4 are reversed first
and then the next 4 elements 5,6,7,8. Hence, the
resultant linked list is 4->2->2->1->8->7->6->5.

â€‹
Example 2:
Input:
LinkedList: 1->2->3->4->5
K = 3
Output:3 2 1 5 4
Explanation:
The first 3 elements are 1,2,3 are reversed
first and then elements 4,5 are reversed.Hence,
the resultant linked list is 3->2->1->5->4.

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverseKNodes(head, k):
    current = head
    prev = None
    next = None
    count = 0

    # Reverse k nodes
    while current is not None and count < k:
        next = current.next
        current.next = prev
        prev = current
        current = next
        count += 1

    # Recursively reverse next set of k nodes
    if next is not None:
        head.next = reverseKNodes(next, k)

    return prev

# Example 1
list1 = Node(1)
list1.next = Node(2)
list1.next.next = Node(2)
list1.next.next.next = Node(4)
list1.next.next.next.next = Node(5)
list1.next.next.next.next.next = Node(6)
list1.next.next.next.next.next.next = Node(7)
list1.next.next.next.next.next.next.next = Node(8)

new_list = reverseKNodes(list1, 4)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 4 2 2 1 8 7 6 5

# Example 2
list2 = Node(1)
list2.next = Node(2)
list2.next.next = Node(3)
list2.next.next.next = Node(4)
list2.next.next.next.next = Node(5)

new_list = reverseKNodes(list2, 3)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 3 2 1 5 4

â€‹
ðŸ’¡
Question 4

Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. 
Give the complexity of your algorithm.
Example:
Inputs:   1->2->3->4->5->6->7->8->9->NULL and k = 3
Output:   3->2->1->4->5->6->9->8->7->NULL.

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverseAlternateKNodes(head, k):
    current = head
    prev = None
    next = None
    count = 0

    # Reverse every alternate k nodes
    while current is not None and count < k:
        next = current.next
        current.next = prev
        prev = current
        current = next
        count += 1

    # Reverse the remaining nodes iteratively
    if count < k:
        temp = None
        while current is not None and count > 0:
            next = current.next
            current.next = prev
            prev = current
            current = next
            count -= 1
            temp = prev

        if temp is not None:
            temp.next = current

    # Recursively reverse the next set of alternate k nodes
    if current is not None:
        head.next = reverseAlternateKNodes(current, k)

    return prev

# Example
list1 = Node(1)
list1.next = Node(2)
list1.next.next = Node(3)
list1.next.next.next = Node(4)
list1.next.next.next.next = Node(5)
list1.next.next.next.next.next = Node(6)
list1.next.next.next.next.next.next = Node(7)
list1.next.next.next.next.next.next.next = Node(8)
list1.next.next.next.next.next.next.next.next = Node(9)

k = 3
new_list = reverseAlternateKNodes(list1, k)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 3 2 1 4 5 6 9 8 7

â€‹
ðŸ’¡
Question 5

Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.
Examples:
Input:   1->2->3->5->2->10, key = 2
Output:  1->2->3->5->10
â€‹
Python Code:


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def deleteLastOccurrence(head, key):
    prev = None
    curr = None
    last_occurrence = None
    temp = head

    # Traverse the linked list to find the last occurrence of the key
    while temp is not None:
        if temp.data == key:
            prev = curr
            last_occurrence = temp
        curr = temp
        temp = temp.next

    # If the last occurrence is found, perform the deletion
    if last_occurrence is not None:
        if prev is None:
            # If the key is the head, update the head to the next node
            head = head.next
        else:
            # Update the prev.next pointer to skip the node with the key
            prev.next = last_occurrence.next

    return head

# Example
list1 = Node(1)
list1.next = Node(2)
list1.next.next = Node(3)
list1.next.next.next = Node(5)
list1.next.next.next.next = Node(2)
list1.next.next.next.next.next = Node(10)

key = 2
new_list = deleteLastOccurrence(list1, key)

# Traverse and print the new list
ptr = new_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 1 2 3 5 10



ðŸ’¡
Question 6

Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the lists (in place) and return the head of the merged list.
Examples:
Input: a: 5->10->15, b: 2->3->20
Output: 2->3->5->10->15->20
Input: a: 1->1, b: 2->4
Output: 1->1->2->4

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def mergeLists(a, b):
    # Create a dummy node and a current pointer
    dummy = Node(None)
    curr = dummy

    # Traverse both linked lists simultaneously
    while a is not None and b is not None:
        if a.data <= b.data:
            curr.next = a
            a = a.next
        else:
            curr.next = b
            b = b.next
        curr = curr.next

    # Set the next pointer of the current pointer to the remaining nodes
    if a is not None:
        curr.next = a
    if b is not None:
        curr.next = b

    # Return the head of the merged list
    return dummy.next

# Example
list1 = Node(5)
list1.next = Node(10)
list1.next.next = Node(15)

list2 = Node(2)
list2.next = Node(3)
list2.next.next = Node(20)

merged_list = mergeLists(list1, list2)

# Traverse and print the merged list
ptr = merged_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 2 3 5 10 15 20


ðŸ’¡
Question 7

Given a Doubly Linked List, the task is to reverse the given Doubly Linked List.
Example:
Original Linked list 10 8 4 2
Reversed Linked list 2 4 8 10
â€‹
Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def reverseDLL(head):
    # Check if the list is empty or has only one node
    if head is None or head.next is None:
        return head

    # Initialize pointers for reversing
    prev = None
    curr = head

    # Traverse through the list and swap prev and next pointers
    while curr is not None:
        # Swap prev and next pointers
        curr.prev = curr.next
        curr.next = prev

        # Move to the next node
        prev = curr
        curr = curr.prev

    # Update the head of the reversed list
    head = prev

    return head

# Example
list1 = Node(10)
list1.next = Node(8)
list1.next.prev = list1
list1.next.next = Node(4)
list1.next.next.prev = list1.next
list1.next.next.next = Node(2)
list1.next.next.next.prev = list1.next.next

reversed_list = reverseDLL(list1)

# Traverse and print the reversed list
ptr = reversed_list
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 2 4 8 10



ðŸ’¡
Question 8

Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.
Example 1:
Input:
LinkedList = 1 <--> 3 <--> 4
x = 3
Output:1 3
Explanation:After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.

â€‹
Example 2:
Input:
LinkedList = 1 <--> 5 <--> 2 <--> 9
x = 1
Output:5 2 9

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def deleteNode(head, position):
    # Check if the list is empty
    if head is None:
        return head

    # Check if the node to be deleted is the head
    if position == 1:
        head = head.next
        if head is not None:
            head.prev = None
        return head

    # Traverse to the node at the given position
    curr = head
    for _ in range(position - 1):
        curr = curr.next
        if curr is None:
            return head

    # Update the pointers of adjacent nodes
    curr.prev.next = curr.next
    if curr.next is not None:
        curr.next.prev = curr.prev

    return head

# Example 1
list1 = Node(1)
list1.next = Node(3)
list1.next.prev = list1
list1.next.next = Node(4)
list1.next.next.prev = list1.next

position = 3
new_list1 = deleteNode(list1, position)

# Traverse and print the updated list
ptr = new_list1
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 1 3

# Example 2
list2 = Node(1)
list2.next = Node(5)
list2.next.prev = list2
list2.next.next = Node(2)
list2.next.next.prev = list2.next
list2.next.next.next = Node(9)
list2.next.next.next.prev = list2.next.next

position = 1
new_list2 = deleteNode(list2, position)

# Traverse and print the updated list
ptr = new_list2
while ptr is not None:
    print(ptr.data, end=" ")
    ptr = ptr.next
# Output: 5 2 9
