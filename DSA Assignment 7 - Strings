*Question 1

Given two strings s and t, *determine if they are isomorphic*.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = "egg", t = "add"

**Output:** true

Python Code:

def isIsomorphic(s, t):
    if len(s) != len(t):
        return False

    s_to_t = {}
    t_to_s = {}

    for i in range(len(s)):
        if s[i] in s_to_t:
            if s_to_t[s[i]] != t[i]:
                return False
        else:
            s_to_t[s[i]] = t[i]

        if t[i] in t_to_s:
            if t_to_s[t[i]] != s[i]:
                return False
        else:
            t_to_s[t[i]] = s[i]

    return True

# Example usage:
s = "egg"
t = "add"
print(isIsomorphic(s, t)) # OUtput = True


*Question 2

Given a string num which represents an integer, return true *if* num *is a **strobogrammatic number***.

A **strobogrammatic number** is a number that looks the same when rotated 180 degrees (looked at upside down).

**Example 1:**

**Input:** num = "69"

**Output:**

true

Python Code:

def isStrobogrammatic(num):
    mapping = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}

    left = 0
    right = len(num) - 1

    while left <= right:
        if num[left] not in mapping or num[right] not in mapping or mapping[num[left]] != num[right]:
            return False
        left += 1
        right -= 1

    return True

# Example usage:
num = "69"
print(isStrobogrammatic(num))  # OUtput = True

*Question 3

Given two non-negative integers, num1 and num2 represented as string, return *the sum of* num1 *and* num2 *as a string*.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

**Example 1:**

**Input:** num1 = "11", num2 = "123"

**Output:**

"134"

Python Code:
def addStrings(num1, num2):
    result = []
    carry = 0
    i = len(num1) - 1
    j = len(num2) - 1
    
    while i >= 0 or j >= 0 or carry > 0:
        digit1 = int(num1[i]) if i >= 0 else 0
        digit2 = int(num2[j]) if j >= 0 else 0
        
        # Compute the sum of the current digits and the carry
        total = digit1 + digit2 + carry
        carry = total // 10
        digit_sum = total % 10
        
        # Prepend the digit sum to the result list
        result.insert(0, str(digit_sum))
        
        i -= 1
        j -= 1
    
    return "".join(result)

# Example usage:
num1 = "11"
num2 = "123"
result = addStrings(num1, num2)
print("Output:", result) # Output: "134"


*Question 4

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

**Example 1:**

**Input:** s = "Let's take LeetCode contest"

**Output:** "s'teL ekat edoCteeL tsetnoc"

Python Code:

def reverseWords(s):
    words = s.split()  # Split the string into words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words with whitespace
    return reversed_sentence

# Example usage:
s = "Let's take LeetCode contest"
result = reverseWords(s)
print("Output:",result)  # Output: "s'teL ekat edoCteeL tsetnoc"


*Question 5

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

**Example 1:**

**Input:** s = "abcdefg", k = 2

**Output:**

"bacdfeg"

Python Code:

def reverseStr(s, k):
    result = ''
    i = 0
    while i < len(s):
        # Reverse the first k characters
        result += s[i:i+k][::-1]
        # Append the remaining characters as they are
        result += s[i+k:i+2*k]
        i += 2*k
    return result

# Example usage:
s = "abcdefg"
k = 2
result = reverseStr(s, k)
print("Output:",result)  # Output: "bacdfeg"

*Question 6

Given two strings s and goal, return true *if and only if* s *can become* goal *after some number of **shifts** on* s.

A **shift** on s consists of moving the leftmost character of s to the rightmost position.

- For example, if s = "abcde", then it will be "bcdea" after one shift.

**Example 1:**

**Input:** s = "abcde", goal = "cdeab"

**Output:**

true

Python Code:

def canShift(s, goal):
    if len(s) != len(goal):
        return False

    concatenated = s + s
    return goal in concatenated
# Example usage:
s = "abcde"
goal = "cdeab"
result = canShift(s, goal)
print("Output:", result) # Output: true

*Question 7

Given two strings s and t, return true *if they are equal when both are typed into empty text editors*. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

**Example 1:**

**Input:** s = "ab#c", t = "ad#c"

**Output:** true

**Explanation:**

Both s and t become "ac".

Python Code:

def backspaceCompare(s, t):
    def processString(string):
        stack = []
        for char in string:
            if char != '#':
                stack.append(char)
            elif stack:
                stack.pop()
        return ''.join(stack)

    return processString(s) == processString(t)

s = "ab#c"
t = "ad#c"
result = backspaceCompare(s, t)
print("Output:", result) # Output: true

*Question 8
You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

**Example 1:**
Input:** coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]

**Output:** true

Python Code:

def checkStraightLine(coordinates):
    if len(coordinates) <= 2:
        return True
    
    x1, y1 = coordinates[0]
    x2, y2 = coordinates[1]
    
    for i in range(2, len(coordinates)):
        x3, y3 = coordinates[i]
        if (y2 - y1) * (x3 - x1) != (y3 - y1) * (x2 - x1):
            return False
        
    return True

# Example usage:
coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
result = checkStraightLine(coordinates)
print("Output:", result)  # Output: True
