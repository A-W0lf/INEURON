<aside>
ðŸ’¡ **Question 1**

Given an arrayÂ **arr[ ]**Â of sizeÂ **N**Â havingÂ elements, theÂ task is to find the next greater element for each element of the array in order of their appearance in the array.Next greater element of an element in the array is the nearest element on the right which is greater than the current element.If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

**Example 1:**

```
Input:
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ?
since it doesn't exist, it is -1.

```

**Example 2:**

```
Input:
N = 5, arr[] [6 8 0 1 3]
Output:
8 -1 1 3 -1
Explanation:
In the array, the next larger element to
6 is 8, for 8 there is no larger elements
hence it is -1, for 0 it is 1 , for 1 it
is 3 and then for 3 there is no larger
element on right and hence -1.
```

</aside>
Python Code:

def nextGreaterElement(arr):
    stack = []
    result = []

    # Traverse the array from right to left
    for i in range(len(arr)-1, -1, -1):
        # Pop elements from the stack until a greater element is found or the stack becomes empty
        while stack and stack[-1] <= arr[i]:
            stack.pop()

        # If the stack is empty, there is no greater element to the right
        if not stack:
            result.append(-1)
        else:
            result.append(stack[-1])

        stack.append(arr[i])

    # Reverse the result to get the order of appearance in the array
    result.reverse()
    return result


# Test Example 1
arr1 = [1, 3, 2, 4]
print(nextGreaterElement(arr1))  # Output: [3, 4, 4, -1]

# Test Example 2
arr2 = [6, 8, 0, 1, 3]
print(nextGreaterElement(arr2))  # Output: [8, -1, 1, 3, -1]




<aside>
ðŸ’¡ **Question 2**

Given an arrayÂ **a**Â of integers of lengthÂ **n**, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.

**Example 1:**

```
Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the
left of 1. Smaller number than 6 and 2 is 1.
```

**Example 2:**

```
Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see
the smaller numbers. But for 4 the smaller
numbers are 1, 0 and 3. But among them 3
is closest. Similary for 5 it is 4.
```

</aside>
Python Code:

def nearestSmallerElement(arr):
    stack = []
    result = []

    # Traverse the array from left to right
    for i in range(len(arr)):
        # Pop elements from the stack until a smaller element is found or the stack becomes empty
        while stack and stack[-1] >= arr[i]:
            stack.pop()

        # If the stack is empty, there is no smaller element on the left
        if not stack:
            result.append(-1)
        else:
            result.append(stack[-1])

        stack.append(arr[i])

    return result


# Test Example 1
arr1 = [1, 6, 2]
print(nearestSmallerElement(arr1))  # Output: [-1, 1, 1]

# Test Example 2
arr2 = [1, 5, 0, 3, 4, 5]
print(nearestSmallerElement(arr2))  # Output: [-1, 1, -1, 0, 3, 4]


<aside>
ðŸ’¡ **Question 3**

Implement a StackÂ using two queuesÂ **q1**Â andÂ **q2**.

**Example 1:**

```
Input:
push(2)
push(3)
pop()
push(4)
pop()
Output:3 4
Explanation:
push(2)Â the stackÂ will be {2}
push(3)Â the stackÂ will be {2 3}
pop()   poped element will be 3Â the
Â        stackÂ will be {2}
push(4)Â the stackÂ will be {2 4}
pop() Â  poped element will be 4

```

**Example 2:**

```
Input:
push(2)
pop()
pop()
push(3)
Output:2 -1
```

</aside>

Python Code:

from collections import deque

class Stack:
    def __init__(self):
        self.q1 = deque()
        self.q2 = deque()

    def push(self, x):
        self.q1.append(x)

    def pop(self):
        if self.empty():
            return -1

        while len(self.q1) > 1:
            self.q2.append(self.q1.popleft())

        element = self.q1.popleft()

        # Swap the names of q1 and q2
        self.q1, self.q2 = self.q2, self.q1

        return element

    def top(self):
        if self.empty():
            return -1

        return self.q1[0]

    def empty(self):
        return len(self.q1) == 0 and len(self.q2) == 0


# Test Example 1
stack1 = Stack()
stack1.push(2)
stack1.push(3)
print(stack1.pop())  # Output: 3
stack1.push(4)
print(stack1.pop())  # Output: 4

# Test Example 2
stack2 = Stack()
stack2.push(2)
print(stack2.pop())  # Output: 2
print(stack2.pop())  # Output: -1


<aside>
ðŸ’¡ **Question 4**

You are given a stackÂ **St**. You have to reverse the stack using recursion.

**Example 1:**

```
Input:St = {3,2,1,7,6}
Output:{6,7,1,2,3}
```

**Example 2:**

```
Input:St = {4,3,9,6}
Output:{6,9,3,4}
```

</aside>

Python Code:

def insertAtBottom(stack, element):
    if len(stack) == 0:
        stack.append(element)
    else:
        top = stack.pop()
        insertAtBottom(stack, element)
        stack.append(top)

def reverseStack(stack):
    if len(stack) > 0:
        top = stack.pop()
        reverseStack(stack)
        insertAtBottom(stack, top)


# Test Example 1
stack1 = [3, 2, 1, 7, 6]
reverseStack(stack1)
print(stack1)  # Output: [6, 7, 1, 2, 3]

# Test Example 2
stack2 = [4, 3, 9, 6]
reverseStack(stack2)
print(stack2)  # Output: [6, 9, 3, 4]


<aside>
ðŸ’¡ **Question 5**

You are given a stringÂ **S**, the task is to reverse the string using stack.

**Example 1:**

```
Input: S="GeeksforGeeks"
Output: skeeGrofskeeG
```

</aside>
Python Code:

def reverseString(S):
    stack = []
    reversed_str = ""

    # Push each character onto the stack
    for char in S:
        stack.append(char)

    # Pop each character from the stack and append it to the reversed string
    while stack:
        reversed_str += stack.pop()

    return reversed_str


# Test Example
S = "GeeksforGeeks"
print(reverseString(S))  # Output: skeeGrofskeeG

<aside>
ðŸ’¡ **Question 6**

Given stringÂ **S**Â representing aÂ postfix expression, the task is to evaluate the expression and find the final value. Operators will only include the basic arithmetic operators likeÂ ***, /, + and -**.

**Example 1:**

```
Input: S = "231*+9-"
Output: -4
Explanation:
After solving the given expression,
we have -4 as result.

```

**Example 2:**

```
Input: S = "123+*8-"
Output: -3
Explanation:
After solving the given postfix
expression, we have -3 as result.
```

</aside>
Python Code:

def evaluatePostfix(S):
    stack = []

    for char in S:
        if char.isdigit():
            stack.append(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()

            if char == '+':
                result = operand1 + operand2
            elif char == '-':
                result = operand1 - operand2
            elif char == '*':
                result = operand1 * operand2
            elif char == '/':
                result = operand1 / operand2

            stack.append(result)

    return stack[0]


# Test Example 1
S1 = "231*+9-"
print(evaluatePostfix(S1))  # Output: -4

# Test Example 2
S2 = "123+*8-"
print(evaluatePostfix(S2))  # Output: -3



<aside>
ðŸ’¡ **Question 7**

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement theÂ `MinStack`Â class:

- `MinStack()`Â initializes the stack object.
- `void push(int val)`Â pushes the elementÂ `val`Â onto the stack.
- `void pop()`Â removes the element on the top of the stack.
- `int top()`Â gets the top element of the stack.
- `int getMin()`Â retrieves the minimum element in the stack.

You must implement a solution withÂ `O(1)`Â time complexity for each function.

**Example 1:**

```
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
```

</aside>
Python Code:

class MinStack:

    def __init__(self):
        self.stack = []  # stack to store the elements
        self.min_stack = []  # stack to store the minimum elements

    def push(self, val: int) -> None:
        self.stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self) -> None:
        if self.stack[-1] == self.min_stack[-1]:
            self.min_stack.pop()
        self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]


# Test Example
minStack = MinStack()
minStack.push(-2)
minStack.push(0)
minStack.push(-3)
print(minStack.getMin())  # Output: -3
minStack.pop()
print(minStack.top())  # Output: 0
print(minStack.getMin())  # Output: -2

<aside>
ðŸ’¡ **Question 8**

GivenÂ `n`Â non-negative integers representing an elevation map where the width of each bar isÂ `1`, compute how much water it can trap after raining.

**Example 1:**

!https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png

```
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

```

**Example 2:**

```
Input: height = [4,2,0,3,2,5]
Output: 9
```

</aside>

Python Code:

def trap(height):
    left = 0
    right = len(height) - 1
    left_max = right_max = water = 0

    while left <= right:
        if height[left] <= height[right]:
            if height[left] > left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] > right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1

    return water


# Test Example 1
height1 = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
print(trap(height1))  # Output: 6

# Test Example 2
height2 = [4, 2, 0, 3, 2, 5]
print(trap(height2))  # Output: 9
