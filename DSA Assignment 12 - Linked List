Assignment Questions 12

Question 1

Given a singly linked list, delete middle of the linked list. For example, if given linked list is 1->2->3->4->5 then linked list should be modified to 1->2->4->5.If there are even nodes, then there would be two middle nodes, we need to delete the second middle element. For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.If the input linked list is NULL or has 1 node, then it should return NULL
Example 1:
Input:
LinkedList: 1->2->3->4->5
Output:1 2 4 5

Python Code 1:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def deleteMiddle(head):
    if head is None or head.next is None:
        return head

    slow = head
    fast = head
    prev = None

    while fast and fast.next:
        fast = fast.next.next
        prev = slow
        slow = slow.next

    prev.next = slow.next

    return head

def printLinkedList(head):
    curr = head
    while curr:
        print(curr.data, end=" ")
        curr = curr.next
    print()

# Create the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)

print("Original Linked List:")
printLinkedList(head)

head = deleteMiddle(head)

print("Modified Linked List:")
printLinkedList(head)

"""
Original Linked List:
1 2 3 4 5
Modified Linked List:
1 2 4 5
"""


Example 2:
Input:
LinkedList: 2->4->6->7->5->1
Output:2 4 6 5 1


Python Code 2:
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def deleteMiddle(head):
    if head is None or head.next is None:
        return head

    slow = head
    fast = head
    prev = None

    while fast and fast.next:
        fast = fast.next.next
        prev = slow
        slow = slow.next

    prev.next = slow.next

    return head

def printLinkedList(head):
    curr = head
    while curr:
        print(curr.data, end=" ")
        curr = curr.next
    print()

# Create the linked list
head = Node(2)
head.next = Node(4)
head.next.next = Node(6)
head.next.next.next = Node(7)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(1)

print("Original Linked List:")
printLinkedList(head)

head = deleteMiddle(head)

print("Modified Linked List:")
printLinkedList(head)
"""
Original Linked List:
2 4 6 7 5 1
Modified Linked List:
2 4 6 5 1
"""

Question 2

Given a linked list of N nodes. The task is to check if the linked list has a loop. Linked list can contain self loop.
Example 1:
Input:
N = 3
value[] = {1,3,4}
x(position at which tail is connected) = 2
Output:True
Explanation:In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.
​
Example 2:
Input:
N = 4
value[] = {1,8,3,4}
x = 0
Output:False
Explanation:For N = 4 ,x = 0 means
then lastNode->next = NULL, then
the Linked list does not contains
any loop.
​
Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detectLoop(head):
    slow = head
    fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return True

    return False

# Create the linked list
head = Node(1)
head.next = Node(3)
head.next.next = Node(4)

# Example 1: Linked list with a loop
head.next.next.next = head.next
print(detectLoop(head))  # Output: True

# Example 2: Linked list without a loop
head.next.next.next = None
print(detectLoop(head))  # Output: False


Question 3
Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.
Example 1:
Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output:8
Explanation:In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end is 8.

​
Example 2:
Input:
N = 5
LinkedList: 10->5->100->5
Output:-1
Explanation:In the second example, there
are 4 nodes in the linked list and we
need to find 5th from the end. Since 'n'
is more than the number of nodes in the
linked list, the output is -1.

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def getNthFromEnd(head, n):
    if not head:
        return -1

    fast = head
    slow = head

    # Move the fast pointer N nodes ahead
    for _ in range(n):
        if fast is None:
            return -1
        fast = fast.next

    # Move both pointers until the fast pointer reaches the end
    while fast:
        slow = slow.next
        fast = fast.next

    # At this point, the slow pointer is at the Nth node from the end
    return slow.data


# Create the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)
head.next.next.next.next.next.next = Node(7)
head.next.next.next.next.next.next.next = Node(8)
head.next.next.next.next.next.next.next.next = Node(9)

# Example 1: Find the 2nd node from the end
N = 2
print(getNthFromEnd(head, N))  # Output: 8

# Example 2: Find the 5th node from the end
N = 5
print(getNthFromEnd(head, N))  # Output: -1


Question 4
Given a singly linked list of characters, write a function that returns true if the given list is a palindrome, else false.
Examples:
Input: R->A->D->A->R->NULL
Output: Yes
Input: C->O->D->E->NULL
Output: No

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverseLinkedList(head):
    prev = None
    curr = head

    while curr:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node

    return prev

def isPalindrome(head):
    if not head or not head.next:
        return True

    slow = head
    fast = head

    # Find the middle of the linked list
    while fast.next and fast.next.next:
        slow = slow.next
        fast = fast.next.next

    # Reverse the second half of the linked list
    second_half = reverseLinkedList(slow.next)
    slow.next = None

    # Compare the first half with the reversed second half
    first_half = head
    while first_half and second_half:
        if first_half.data != second_half.data:
            return False
        first_half = first_half.next
        second_half = second_half.next

    # Restore the original order of the linked list
    second_half = reverseLinkedList(reverseLinkedList(slow.next))
    slow.next = second_half

    return True


# Create the linked list
head1 = Node('R')
head1.next = Node('A')
head1.next.next = Node('D')
head1.next.next.next = Node('A')
head1.next.next.next.next = Node('R')

head2 = Node('C')
head2.next = Node('O')
head2.next.next = Node('D')
head2.next.next.next = Node('E')

# Example 1: Check if the linked list is a palindrome
print(isPalindrome(head1))  # Output: True

# Example 2: Check if the linked list is a palindrome
print(isPalindrome(head2))  # Output: False


Question 5

Given a linked list of N nodes such that it may contain a loop.
A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.
Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.
Example 1:
Input:
N = 3
value[] = {1,3,4}
X = 2
Output:1
Explanation:The link list looks like
1 -> 3 -> 4
     ^    |
     |____|
A loop is present. If you remove it
successfully, the answer will be 1.

​
Example 2:
Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output:1
Explanation:The Linked list does not
contains any loop.
​
Example 3:
Input:
N = 4
value[] = {1,2,3,4}
X = 1
Output:1
Explanation:The link list looks like
1 -> 2 -> 3 -> 4
^              |
|______________|
A loop is present.
If you remove it successfully,
the answer will be 1.

Python Code :

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detectAndRemoveLoop(head):
    slow = head
    fast = head

    # Find the meeting point of the slow and fast pointers
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break

    # If no loop is found, return the linked list as it is
    if fast is None or fast.next is None:
        return head

    # Move the slow pointer back to the head
    slow = head

    # Move both pointers one step at a time until they meet again
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Break the loop by setting the next pointer of the node just before the start of the loop as None
    fast.next = None

    return head


# Create the linked list
head1 = Node(1)
head1.next = Node(3)
head1.next.next = Node(4)
head1.next.next.next = head1.next  # Creating a loop at position X=2

head2 = Node(1)
head2.next = Node(8)
head2.next.next = Node(3)
head2.next.next.next = Node(4)

head3 = Node(1)
head3.next = Node(2)
head3.next.next = Node(3)
head3.next.next.next = Node(4)
head3.next.next.next.next = head3  # Creating a loop at position X=1

# Example 1: Remove the loop from the linked list
head1 = detectAndRemoveLoop(head1)
print(head1.data)  # Output: 1

# Example 2: Remove the loop from the linked list
head2 = detectAndRemoveLoop(head2)
print(head2.data)  # Output: 1

# Example 3: Remove the loop from the linked list
head3 = detectAndRemoveLoop(head3)
print(head3.data)  # Output: 1

​

Question 6

Given a linked list and two integers M and N. Traverse the linked list such that you retain M nodes then delete next N nodes, continue the same till end of the linked list.
Difficulty Level: Rookie
Examples:
Input:
M = 2, N = 2
Linked List: 1->2->3->4->5->6->7->8
Output:
Linked List: 1->2->5->6

Input:
M = 3, N = 2
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->2->3->6->7->8

Input:
M = 1, N = 1
Linked List: 1->2->3->4->5->6->7->8->9->10
Output:
Linked List: 1->3->5->7->9

Python Code 1:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def skipAndDelete(head, M, N):
    if M == 0:
        return None

    current = head
    prev = None

    while current:
        # Skip M nodes
        for _ in range(M):
            if current is None:
                return head
            prev = current
            current = current.next

        # Delete N nodes
        for _ in range(N):
            if current is None:
                break
            next_node = current.next
            current = next_node

        # Update the next pointer of the prev node to skip the N nodes
        prev.next = current

    return head


# Create the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)
head.next.next.next.next.next.next = Node(7)
head.next.next.next.next.next.next.next = Node(8)
head.next.next.next.next.next.next.next.next = Node(9)
head.next.next.next.next.next.next.next.next.next = Node(10)

# Example 1: Skip 3 nodes and delete 2 nodes
M, N = 3, 2
head = skipAndDelete(head, M, N)

# Print the resulting linked list
current = head
while current:
    print(current.data, end=" ")
    current = current.next
# Output: 1->2->3->6->7->8

Python Code 2:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def skipAndDelete(head, M, N):
    if M == 0:
        return None

    current = head
    prev = None

    while current:
        # Skip M nodes
        for _ in range(M):
            if current is None:
                return head
            prev = current
            current = current.next

        # Delete N nodes
        for _ in range(N):
            if current is None:
                break
            next_node = current.next
            current = next_node

        # Update the next pointer of the prev node to skip the N nodes
        prev.next = current

    return head


# Create the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)
head.next.next.next.next.next.next = Node(7)
head.next.next.next.next.next.next.next = Node(8)
head.next.next.next.next.next.next.next.next = Node(9)
head.next.next.next.next.next.next.next.next.next = Node(10)

# Example 2: Skip 1 node and delete 1 node
M, N = 1, 1
head = skipAndDelete(head, M, N)

# Print the resulting linked list
current = head
while current:
    print(current.data, end=" ")
    current = current.next
# Output: 1->3->5->7->9

Python Code 3:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def skipAndDelete(head, M, N):
    if M == 0:
        return None

    current = head
    prev = None

    while current:
        # Skip M nodes
        for _ in range(M):
            if current is None:
                return head
            prev = current
            current = current.next

        # Delete N nodes
        for _ in range(N):
            if current is None:
                break
            next_node = current.next
            current = next_node

        # Update the next pointer of the prev node to skip the N nodes
        prev.next = current

    return head


# Create the linked list
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = Node(6)
head.next.next.next.next.next.next = Node(7)
head.next.next.next.next.next.next.next = Node(8)

# Example 3: Skip 2 nodes and delete 2 nodes
M, N = 2, 2
head = skipAndDelete(head, M, N)

# Print the resulting linked list
current = head
while current:
    print(current.data, end=" ")
    current = current.next
# Output: 1->2->5->6

Question 7

Given two linked lists, insert nodes of second list into first list at alternate positions of first list.
For example, if first list is 5->7->17->13->11 and second is 12->10->2->4->6, the first list should become 5->12->7->10->17->2->13->4->11->6 and second list should become empty. The nodes of second list should only be inserted when there are positions available. For example, if the first list is 1->2->3 and second list is 4->5->6->7->8, then first list should become 1->4->2->5->3->6 and second list to 7->8.
Use of extra space is not allowed (Not allowed to create additional nodes), i.e., insertion must be done in-place. Expected time complexity is O(n) where n is number of nodes in first list.

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def mergeLists(first, second):
    if first is None:
        return second
    if second is None:
        return first

    current_first = first
    current_second = second

    while current_first is not None and current_second is not None:
        next_first = current_first.next
        next_second = current_second.next

        current_first.next = current_second
        current_second.next = next_first

        current_first = next_first
        current_second = next_second

    second = None  # Make the second list empty

    return first


# Create the first linked list: 5->7->17->13->11
first = Node(5)
first.next = Node(7)
first.next.next = Node(17)
first.next.next.next = Node(13)
first.next.next.next.next = Node(11)

# Create the second linked list: 12->10->2->4->6
second = Node(12)
second.next = Node(10)
second.next.next = Node(2)
second.next.next.next = Node(4)
second.next.next.next.next = Node(6)

# Merge the second list into the first list
first = mergeLists(first, second)

# Print the resulting first list
current = first
while current:
    print(current.data, end=" ")
    current = current.next
# Output: 5->12->7->10->17->2->13->4->11->6

# Print the resulting second list (empty)
print()
current = second
while current:
    print(current.data, end=" ")
    current = current.next
# Output: (empty)


Question 8
Given a singly linked list, find if the linked list is circular or not.
A linked list is called circular if it is not NULL-terminated and all nodes are connected in the form of a cycle. Below is an example of a circular linked list.

Python Code:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def isCircular(head):
    if head is None:
        return False

    slow = head
    fast = head.next

    while fast is not None and fast.next is not None:
        if slow == fast:
            return True
        slow = slow.next
        fast = fast.next.next

    return False


# Create a circular linked list: 1->2->3->4->5->1
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)
head.next.next.next.next.next = head  # Make it circular by connecting the last node to the head

# Check if the linked list is circular
circular = isCircular(head)
print(circular)
# Output: True

# Create a non-circular linked list: 1->2->3->4->5
head = Node(1)
head.next = Node(2)
head.next.next = Node(3)
head.next.next.next = Node(4)
head.next.next.next.next = Node(5)

# Check if the linked list is circular
circular = isCircular(head)
print(circular)
# Output: False
